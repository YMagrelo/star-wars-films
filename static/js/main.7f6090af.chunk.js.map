{"version":3,"sources":["assets/preloader/Dual_Ring-1s-200px.svg","constants.js","api.js","redux/reducer.jsx","components/common/Preloader.jsx","components/EpisodesList.jsx","propTypesConstant.js","components/EpisodeDetails.jsx","components/Character.jsx","components/Planet.jsx","components/Starship.jsx","components/Vehicle.jsx","components/Species.jsx","App.jsx","redux/store.jsx","index.js"],"names":["module","exports","BASE_URL","getFilmsDetails","filmId","fetch","then","response","json","getCharacter","charId","getPlanet","planetId","getVehicle","vehicleId","getSpecies","speciesId","getSearchFilm","query","initialState","films","searchFilm","filmDetails","character","planet","starship","vehicle","species","Preloader","className","src","preloader","alt","connect","PropTypes","arrayOf","shape","title","string","isRequired","episode_id","number","opening_crawl","director","producer","release_date","characters","planets","starships","vehicles","created","edited","url","name","height","mass","hair_color","skin_color","eye_color","birth_year","gender","homeworld","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","residents","model","manufacturer","cost_in_credits","length","max_atmosphering_speed","crew","passengers","cargo_capacity","consumables","hyperdrive_rating","MGLT","starship_class","pilots","vehicle_class","classification","designation","average_height","skin_colors","hair_colors","eye_colors","average_lifespan","language","people","state","dispatch","getFilms","a","data","type","payload","results","getSearchFilmThunk","props","useState","setQuery","useEffect","sortedFilms","sort","b","map","film","slice","key","to","placeholder","value","onChange","event","target","EpisodeDetails","details","getFilmDetails","match","params","char","ship","shipId","EpisodeDetailsWithRouter","withRouter","getFilmDetailsThunk","defaultProps","object","Character","CharacterWithRouter","getCharacterThunk","Planet","resident","PlanetWithRouter","getPlanetThunk","Starship","getStarship","starshipId","pilot","StarshipWithRouter","getStarshipThunk","Vehicle","VehicleWithRouter","getVehicleThunk","Species","SpeciesWithRouter","getSpeciesThunk","App","path","component","EpisodesList","exact","store","createStore","action","applyMiddleware","thunkMiddleware","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7f6090af.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Dual_Ring-1s-200px.ac96feea.svg\";","export const BASE_URL = 'https://swapi.dev/api/';\n\n// action types\nexport const GET_FILMS = 'GET_FILMS';\nexport const GET_FILM_DETAILS = 'GET_FILM_DETAILS';\nexport const GET_CHARACTER = 'GET_CHARACTER';\nexport const GET_PLANET = 'GET_PLANET';\nexport const GET_STARSHIP = 'GET_STARSHIP';\nexport const GET_VIHECLE = 'GET_VEHICLE';\nexport const GET_SPECIES = 'GET_SPECIES';\nexport const GET_SEARCH_FILM = 'GET_SEARCH_FILM';\n\n// action creators\nexport const setFilms = payload => ({\n  type: GET_FILMS,\n  payload,\n});\nexport const setFilmsDetails = payload => ({\n  type: GET_FILM_DETAILS,\n  payload,\n});\nexport const setCharacter = payload => ({\n  type: GET_CHARACTER,\n  payload,\n});\nexport const setPlanet = payload => ({\n  type: GET_PLANET,\n  payload,\n});\nexport const setStarship = payload => ({\n  type: GET_STARSHIP,\n  payload,\n});\nexport const setVehicle = payload => ({\n  type: GET_VIHECLE,\n  payload,\n});\nexport const setSpecies = payload => ({\n  type: GET_SPECIES,\n  payload,\n});\nexport const setSearchFilm = payload => ({\n  type: GET_SEARCH_FILM,\n  payload,\n});\n\nexport const charUrlLength = 28;\nexport const planetUrlLength = 29;\nexport const starshipsUrlLength = 31;\nexport const filmsUrlLength = 27;\nexport const vehicleUrlLength = 30;\nexport const speciesUrlLength = 29;\n","import { BASE_URL } from './constants';\n\nexport const getFilms = () => fetch(`${BASE_URL}films/`)\n  .then(response => response.json());\n\nexport const getFilmsDetails = filmId => fetch(`${BASE_URL}films/${filmId}`)\n  .then(response => response.json());\n\nexport const getCharacter = charId => fetch(`${BASE_URL}people/${charId}`)\n  .then(response => response.json());\n\nexport const getPlanet = planetId => fetch(`${BASE_URL}planets/${planetId}`)\n  .then(response => response.json());\n\nexport const getStarship = shipId => fetch(\n  `${BASE_URL}starships/${shipId}`,\n)\n  .then(response => response.json());\n\nexport const getVehicle = vehicleId => fetch(\n  `${BASE_URL}vehicles/${vehicleId}`,\n)\n  .then(response => response.json());\n\nexport const getSpecies = speciesId => fetch(\n  `${BASE_URL}species/${speciesId}`,\n)\n  .then(response => response.json());\n\nexport const getSearchFilm = query => fetch(\n  `${BASE_URL}films/?search=${query}`,\n)\n  .then(response => response.json());\n","import {\n  getFilms,\n  getFilmsDetails,\n  getCharacter,\n  getPlanet,\n  getStarship,\n  getVehicle,\n  getSpecies,\n  getSearchFilm,\n} from '../api';\nimport {\n  GET_FILMS,\n  GET_FILM_DETAILS,\n  GET_CHARACTER,\n  GET_PLANET,\n  GET_STARSHIP,\n  GET_VIHECLE,\n  setFilms,\n  setFilmsDetails,\n  setCharacter,\n  setPlanet,\n  setStarship,\n  setVehicle,\n  GET_SPECIES,\n  setSpecies,\n  GET_SEARCH_FILM,\n  setSearchFilm,\n} from '../constants';\n\nconst initialState = {\n  films: [],\n  searchFilm: [],\n  filmDetails: null,\n  character: null,\n  planet: null,\n  starship: null,\n  vehicle: null,\n  species: null,\n};\n\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_FILMS:\n      return {\n        ...state,\n        films: action.payload,\n      };\n\n    case GET_SEARCH_FILM:\n      return {\n        ...state,\n        searchFilm: action.payload,\n      };\n\n    case GET_FILM_DETAILS:\n      return {\n        ...state,\n        filmDetails: action.payload,\n      };\n\n    case GET_CHARACTER:\n      return {\n        ...state,\n        character: action.payload,\n      };\n\n    case GET_PLANET:\n      return {\n        ...state,\n        planet: action.payload,\n      };\n\n    case GET_STARSHIP:\n      return {\n        ...state,\n        starship: action.payload,\n      };\n\n    case GET_VIHECLE:\n      return {\n        ...state,\n        vehicle: action.payload,\n      };\n\n    case GET_SPECIES:\n      return {\n        ...state,\n        species: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const getFilmsThunk = () => async(dispatch) => {\n  const data = await getFilms();\n\n  dispatch(setFilms(data.results));\n};\n\nexport const getFilmDetailsThunk = filmId => async(dispatch) => {\n  const data = await getFilmsDetails(filmId);\n\n  dispatch(setFilmsDetails(data));\n};\n\nexport const getCharacterThunk = charId => async(dispatch) => {\n  const data = await getCharacter(charId);\n\n  dispatch(setCharacter(data));\n};\n\nexport const getPlanetThunk = planetId => async(dispatch) => {\n  const data = await getPlanet(planetId);\n\n  dispatch(setPlanet(data));\n};\n\nexport const getStarshipThunk = starshipId => async(dispatch) => {\n  const data = await getStarship(starshipId);\n\n  dispatch(setStarship(data));\n};\n\nexport const getVehicleThunk = vehicleId => async(dispatch) => {\n  const data = await getVehicle(vehicleId);\n\n  dispatch(setVehicle(data));\n};\n\nexport const getSpeciesThunk = speciesId => async(dispatch) => {\n  const data = await getSpecies(speciesId);\n\n  dispatch(setSpecies(data));\n};\n\nexport const getSearchFilmThunk = query => async(dispatch) => {\n  const data = await getSearchFilm(query);\n\n  dispatch(setSearchFilm(data.results));\n};\n","import React from 'react';\nimport './Preloader.scss';\nimport preloader from '../../assets/preloader/Dual_Ring-1s-200px.svg';\n\nexport const Preloader = () => (\n  <div className=\"preloader\">\n    <img src={preloader} alt=\"preloader\" className=\"preloader__img\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport './EpisodesList.scss';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { getFilmsThunk, getSearchFilmThunk } from '../redux/reducer';\nimport { Preloader } from './common/Preloader';\nimport { filmsPropType } from '../propTypesConstant';\nimport { filmsUrlLength } from '../constants';\n\nconst EpisodesList = (props) => {\n  const { films, getFilms, getSearchFilm, searchFilm } = props;\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    getFilms();\n  }, []);\n\n  const handleInput = (event) => {\n    const { value } = event.target;\n\n    setQuery(value);\n  };\n\n  useEffect(() => {\n    getSearchFilm(query);\n  }, [query]);\n\n  const sortedFilms = searchFilm.sort((a, b) => ((a.title > b.title) ? 1 : -1));\n\n  return (\n    <div className=\"episodes\">\n      <h1 className=\"episodes__heading\">The list of the star wars episodes</h1>\n      {!films.length && <Preloader />}\n      <ul className=\"episodes__list\">\n        {sortedFilms.map((film) => {\n          const filmId = film.url.slice(filmsUrlLength, -1);\n\n          return (\n            <li\n              key={film.episode_id}\n              className=\"episodes__item\"\n            >\n\n              <NavLink to={`/films/${filmId}`}>{film.title}</NavLink>\n            </li>\n          );\n        })}\n      </ul>\n      <input\n        type=\"text\"\n        placeholder=\"Search by film title\"\n        className=\"episodes__input\"\n        value={query}\n        onChange={handleInput}\n      />\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  films: state.films,\n  searchFilm: state.searchFilm,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getFilms: () => dispatch(getFilmsThunk()),\n  getSearchFilm: query => dispatch(getSearchFilmThunk(query)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EpisodesList);\n\nEpisodesList.propTypes = {\n  getFilms: PropTypes.func.isRequired,\n  films: filmsPropType.isRequired,\n  getSearchFilm: PropTypes.func.isRequired,\n  searchFilm: filmsPropType.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const filmsPropType = PropTypes.arrayOf(\n  PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    episode_id: PropTypes.number.isRequired,\n    opening_crawl: PropTypes.string.isRequired,\n    director: PropTypes.string.isRequired,\n    producer: PropTypes.string.isRequired,\n    release_date: PropTypes.string.isRequired,\n    characters: PropTypes.arrayOf(PropTypes.string).isRequired,\n    planets: PropTypes.arrayOf(PropTypes.string).isRequired,\n    starships: PropTypes.arrayOf(PropTypes.string).isRequired,\n    vehicles: PropTypes.arrayOf(PropTypes.string).isRequired,\n    species: PropTypes.arrayOf(PropTypes.string).isRequired,\n    created: PropTypes.string.isRequired,\n    edited: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired,\n  }).isRequired,\n);\n\nexport const filmDetailsPropTypes = PropTypes.shape({\n  title: PropTypes.string.isRequired,\n  episode_id: PropTypes.number.isRequired,\n  opening_crawl: PropTypes.string.isRequired,\n  director: PropTypes.string.isRequired,\n  producer: PropTypes.string.isRequired,\n  release_date: PropTypes.string.isRequired,\n  characters: PropTypes.arrayOf(PropTypes.string).isRequired,\n  planets: PropTypes.arrayOf(PropTypes.string).isRequired,\n  starships: PropTypes.arrayOf(PropTypes.string).isRequired,\n  vehicles: PropTypes.arrayOf(PropTypes.string).isRequired,\n  species: PropTypes.arrayOf(PropTypes.string).isRequired,\n  created: PropTypes.string.isRequired,\n  edited: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n});\n\nexport const characterPropType = PropTypes.shape({\n  name: PropTypes.string.isRequired,\n  height: PropTypes.string.isRequired,\n  mass: PropTypes.string.isRequired,\n  hair_color: PropTypes.string.isRequired,\n  skin_color: PropTypes.string.isRequired,\n  eye_color: PropTypes.string.isRequired,\n  birth_year: PropTypes.string.isRequired,\n  gender: PropTypes.string.isRequired,\n  homeworld: PropTypes.string.isRequired,\n  films: PropTypes.arrayOf(PropTypes.string).isRequired,\n  species: PropTypes.arrayOf(PropTypes.string).isRequired,\n  vehicles: PropTypes.arrayOf(PropTypes.string).isRequired,\n  starships: PropTypes.arrayOf(PropTypes.string).isRequired,\n  created: PropTypes.string.isRequired,\n  edited: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n});\n\nexport const planetPropType = PropTypes.shape({\n  name: PropTypes.string.isRequired,\n  rotation_period: PropTypes.string.isRequired,\n  orbital_period: PropTypes.string.isRequired,\n  diameter: PropTypes.string.isRequired,\n  climate: PropTypes.string.isRequired,\n  gravity: PropTypes.string.isRequired,\n  terrain: PropTypes.string.isRequired,\n  surface_water: PropTypes.string.isRequired,\n  population: PropTypes.string.isRequired,\n  residents: PropTypes.arrayOf(PropTypes.string).isRequired,\n  films: PropTypes.arrayOf(PropTypes.string).isRequired,\n  created: PropTypes.string.isRequired,\n  edited: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n});\n\nexport const starshipsPropType = PropTypes.shape({\n  name: PropTypes.string.isRequired,\n  model: PropTypes.string.isRequired,\n  manufacturer: PropTypes.string.isRequired,\n  cost_in_credits: PropTypes.string.isRequired,\n  length: PropTypes.string.isRequired,\n  max_atmosphering_speed: PropTypes.string.isRequired,\n  crew: PropTypes.string.isRequired,\n  passengers: PropTypes.string.isRequired,\n  cargo_capacity: PropTypes.string.isRequired,\n  consumables: PropTypes.string.isRequired,\n  hyperdrive_rating: PropTypes.string.isRequired,\n  MGLT: PropTypes.string.isRequired,\n  starship_class: PropTypes.string.isRequired,\n  pilots: PropTypes.arrayOf(PropTypes.string).isRequired,\n  films: PropTypes.arrayOf(PropTypes.string).isRequired,\n  created: PropTypes.string.isRequired,\n  edited: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n});\n\nexport const vehiclePropType = PropTypes.shape({\n  name: PropTypes.string.isRequired,\n  model: PropTypes.string.isRequired,\n  manufacturer: PropTypes.string.isRequired,\n  cost_in_credits: PropTypes.string.isRequired,\n  length: PropTypes.string.isRequired,\n  max_atmosphering_speed: PropTypes.string.isRequired,\n  crew: PropTypes.string.isRequired,\n  passengers: PropTypes.string.isRequired,\n  cargo_capacity: PropTypes.string.isRequired,\n  consumables: PropTypes.string.isRequired,\n  vehicle_class: PropTypes.string.isRequired,\n  pilots: PropTypes.arrayOf(PropTypes.string).isRequired,\n  films: PropTypes.arrayOf(PropTypes.string).isRequired,\n  created: PropTypes.string.isRequired,\n  edited: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n});\n\nexport const speciesPropType = PropTypes.shape({\n  name: PropTypes.string.isRequired,\n  classification: PropTypes.string.isRequired,\n  designation: PropTypes.string.isRequired,\n  average_height: PropTypes.string.isRequired,\n  skin_colors: PropTypes.string.isRequired,\n  hair_colors: PropTypes.string.isRequired,\n  eye_colors: PropTypes.string.isRequired,\n  average_lifespan: PropTypes.string.isRequired,\n  homeworld: PropTypes.string.isRequired,\n  language: PropTypes.string.isRequired,\n  people: PropTypes.arrayOf(PropTypes.string).isRequired,\n  films: PropTypes.arrayOf(PropTypes.string).isRequired,\n  created: PropTypes.string.isRequired,\n  edited: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n});\n","import React, { useEffect } from 'react';\nimport './EpisodeDetails.scss';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { NavLink, withRouter } from 'react-router-dom';\nimport { getFilmDetailsThunk } from '../redux/reducer';\nimport { Preloader } from './common/Preloader';\nimport { filmDetailsPropTypes } from '../propTypesConstant';\nimport {\n  charUrlLength,\n  planetUrlLength,\n  starshipsUrlLength,\n  vehicleUrlLength,\n  speciesUrlLength,\n} from '../constants';\n\nconst EpisodeDetails = (props) => {\n  const { details, getFilmDetails } = props;\n  const { filmId } = props.match.params;\n\n  useEffect(() => {\n    getFilmDetails(filmId);\n  }, []);\n\n  return (\n    <div className=\"details\">\n      <NavLink to=\"/\"><span>Home</span></NavLink>\n      <h1 className=\"details__heading\">Episode details</h1>\n      {!details && <Preloader />}\n      {details && (\n        <div className=\"details__details-content content\">\n          <h3 className=\"content__title\">{details.title}</h3>\n          <p className=\"content__item\">\n            <strong>Opening crawl: </strong>\n            {details.opening_crawl}\n          </p>\n          <p className=\"content__item\">\n            <strong>Director: </strong>\n            {details.director}\n          </p>\n          <p className=\"content__item\">\n            <strong>Producer: </strong>\n            {' '}\n            {details.producer}\n          </p>\n          <p className=\"content__item\">\n            <strong>Release date: </strong>\n            {' '}\n            {details.release_date}\n          </p>\n          <ul className=\"content__item\">\n            <strong>Characters:</strong>\n            {details.characters.map((char) => {\n              const charId = char.slice(charUrlLength, -1);\n\n              return (\n                <NavLink to={`/people/${charId}`} key={char}>\n                  <li>{char}</li>\n                </NavLink>\n              );\n            })}\n          </ul>\n          <ul className=\"content__item\">\n            <strong>Planets:</strong>\n            {details.planets.map((planet) => {\n              const planetId = planet.slice(planetUrlLength, -1);\n\n              return (\n                <NavLink to={`/planets/${planetId}`} key={planet}>\n                  <li>{planet}</li>\n                </NavLink>\n              );\n            })}\n          </ul>\n          <ul className=\"content__item\">\n            <strong>Starships:</strong>\n            {details.starships.map((ship) => {\n              const shipId = ship.slice(starshipsUrlLength, -1);\n\n              return (\n                <NavLink to={`/starships/${shipId}`} key={ship}>\n                  <li>{ship}</li>\n                </NavLink>\n              );\n            })}\n          </ul>\n          <ul className=\"content__item\">\n            <strong>Vehicles:</strong>\n            {details.vehicles.map((vehicle) => {\n              const vehicleId = vehicle.slice(vehicleUrlLength, -1);\n\n              return (\n                <NavLink to={`/vehicles/${vehicleId}`} key={vehicle}>\n                  <li>{vehicle}</li>\n                </NavLink>\n              );\n            })}\n          </ul>\n          <ul className=\"content__item\">\n            <strong>Species:</strong>\n            {details.species.map((species) => {\n              const speciesId = species.slice(speciesUrlLength, -1);\n\n              return (\n                <NavLink to={`/species/${speciesId}`} key={species}>\n                  <li>{species}</li>\n                </NavLink>\n              );\n            })}\n          </ul>\n\n        </div>\n      )}\n\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  details: state.filmDetails,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getFilmDetails: filmId => dispatch(getFilmDetailsThunk(filmId)),\n});\n\nconst EpisodeDetailsWithRouter = withRouter(EpisodeDetails);\n\nexport default connect(\n  mapStateToProps, mapDispatchToProps,\n)(EpisodeDetailsWithRouter);\n\nEpisodeDetails.propTypes = {\n  getFilmDetails: PropTypes.func.isRequired,\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      filmId: PropTypes.string,\n    }).isRequired,\n  }).isRequired,\n  details: filmDetailsPropTypes,\n};\n\nEpisodeDetails.defaultProps = {\n  details: PropTypes.object,\n};\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { NavLink, withRouter } from 'react-router-dom';\nimport { getCharacterThunk } from '../redux/reducer';\nimport { Preloader } from './common/Preloader';\nimport { characterPropType } from '../propTypesConstant';\nimport {\n  filmsUrlLength,\n  charUrlLength,\n  speciesUrlLength,\n  vehicleUrlLength,\n  starshipsUrlLength,\n} from '../constants';\n\nconst Character = (props) => {\n  const { character, getCharacter } = props;\n  const { charId } = props.match.params;\n\n  useEffect(() => {\n    getCharacter(charId);\n  }, []);\n\n  return (\n    <div className=\"details\">\n      <NavLink to=\"/\"><span>Home</span></NavLink>\n      <h1 className=\"details__heading\">Character details</h1>\n      {!character && <Preloader />}\n      {character && (\n        <div className=\"details__content content\">\n          <h3 className=\"content__title\">{character.name}</h3>\n          <p className=\"content__item\">\n            <strong>Height: </strong>\n            {character.height}\n          </p>\n          <p className=\"content__item\">\n            <strong>Mass: </strong>\n            {character.mass}\n          </p>\n          <p className=\"content__item\">\n            <strong>Hair color: </strong>\n            {' '}\n            {character.hair_color}\n          </p>\n          <p className=\"content__item\">\n            <strong>Skin color: </strong>\n            {' '}\n            {character.skin_color}\n          </p>\n          <p className=\"content__item\">\n            <strong>Eye color: </strong>\n            {' '}\n            {character.eye_color}\n          </p>\n          <p className=\"content__item\">\n            <strong>Birth year: </strong>\n            {' '}\n            {character.birth_year}\n          </p>\n          <p className=\"content__item\">\n            <strong>Gender: </strong>\n            {' '}\n            {character.gender}\n          </p>\n          <p className=\"content__item\">\n            <strong>Home world: </strong>\n            {' '}\n            {character.homeworld && (\n              <NavLink\n                to={`/planets${character.homeworld.slice(charUrlLength, -1)}`}\n              >\n                {character.homeworld}\n              </NavLink>\n            )}\n          </p>\n          <ul className=\"content__item\">\n            <strong>Films:</strong>\n            {character.films.map((film) => {\n              const filmId = film.slice(filmsUrlLength, -1);\n\n              return (\n                <NavLink to={`/films/${filmId}`} key={film}>\n                  <li>{film}</li>\n                </NavLink>\n              );\n            })}\n          </ul>\n          <ul className=\"content__item\">\n            <strong>Species:</strong>\n            {character.species.map((species) => {\n              const speciesId = species.slice(speciesUrlLength, -1);\n\n              return (\n                <NavLink to={`/species/${speciesId}`} key={species}>\n                  <li>{species}</li>\n                </NavLink>\n              );\n            })}\n          </ul>\n          <ul className=\"content__item\">\n            <strong>Vehicles:</strong>\n            {character.vehicles.map((vehicle) => {\n              const vehicleId = vehicle.slice(vehicleUrlLength, -1);\n\n              return (\n                <NavLink to={`/vehicles/${vehicleId}`} key={vehicle}>\n                  <li>{vehicle}</li>\n                </NavLink>\n              );\n            })}\n          </ul>\n          <ul className=\"content__item\">\n            <strong>Starships:</strong>\n            {character.starships.map((ship) => {\n              const shipId = ship.slice(starshipsUrlLength, -1);\n\n              return (\n                <NavLink to={`/starships/${shipId}`} key={ship}>\n                  <li>{ship}</li>\n                </NavLink>\n              );\n            })}\n          </ul>\n\n        </div>\n      )}\n\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  character: state.character,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getCharacter: charId => dispatch(getCharacterThunk(charId)),\n});\n\nconst CharacterWithRouter = withRouter(Character);\n\nexport default connect(\n  mapStateToProps, mapDispatchToProps,\n)(CharacterWithRouter);\n\nCharacter.propTypes = {\n  getCharacter: PropTypes.func.isRequired,\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      charId: PropTypes.string,\n    }).isRequired,\n  }).isRequired,\n  character: characterPropType,\n};\n\nCharacter.defaultProps = {\n  character: PropTypes.object,\n};\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { NavLink, withRouter } from 'react-router-dom';\nimport { getPlanetThunk } from '../redux/reducer';\nimport { Preloader } from './common/Preloader';\nimport { planetPropType } from '../propTypesConstant';\nimport { charUrlLength, filmsUrlLength } from '../constants';\n\nconst Planet = (props) => {\n  const { planet, getPlanet } = props;\n  const { planetId } = props.match.params;\n\n  useEffect(() => {\n    getPlanet(planetId);\n  }, []);\n\n  return (\n    <div className=\"details\">\n      <NavLink to=\"/\"><span>Home</span></NavLink>\n      <h1 className=\"details__heading\">Planet details</h1>\n      {!planet && <Preloader />}\n      {planet && (\n        <div className=\"details__content content\">\n          <h3 className=\"content__title\">{planet.name}</h3>\n          <p className=\"content__item\">\n            <strong>Rotation period: </strong>\n            {planet.rotation_period}\n          </p>\n          <p className=\"content__item\">\n            <strong>Orbital period: </strong>\n            {planet.orbital_period}\n          </p>\n          <p className=\"content__item\">\n            <strong>Diameter: </strong>\n            {' '}\n            {planet.diameter}\n          </p>\n          <p className=\"content__item\">\n            <strong>Climate: </strong>\n            {' '}\n            {planet.climate}\n          </p>\n          <p className=\"content__item\">\n            <strong>Gravity: </strong>\n            {' '}\n            {planet.gravity}\n          </p>\n          <p className=\"content__item\">\n            <strong>Terrain: </strong>\n            {' '}\n            {planet.terrain}\n          </p>\n          <p className=\"content__item\">\n            <strong>Surface water: </strong>\n            {' '}\n            {planet.surface_water}\n          </p>\n          <p className=\"content__item\">\n            <strong>Population: </strong>\n            {' '}\n            {planet.population}\n          </p>\n          <ul className=\"content__item\">\n            <strong>Residents:</strong>\n            {planet.residents.map((resident) => {\n              const charId = resident.slice(charUrlLength, -1);\n\n              return (\n                <NavLink to={`/people/${charId}`} key={resident}>\n                  <li>{resident}</li>\n                </NavLink>\n              );\n            })}\n          </ul>\n          <ul className=\"content__item\">\n            <strong>Films:</strong>\n            {planet.films.map((film) => {\n              const filmId = film.slice(filmsUrlLength, -1);\n\n              return (\n                <NavLink to={`/films/${filmId}`} key={film}>\n                  <li>{film}</li>\n                </NavLink>\n              );\n            })}\n          </ul>\n\n        </div>\n      )}\n\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  planet: state.planet,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getPlanet: planetId => dispatch(getPlanetThunk(planetId)),\n});\n\nconst PlanetWithRouter = withRouter(Planet);\n\nexport default connect(\n  mapStateToProps, mapDispatchToProps,\n)(PlanetWithRouter);\n\nPlanet.propTypes = {\n  getPlanet: PropTypes.func.isRequired,\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      planetId: PropTypes.string,\n    }).isRequired,\n  }).isRequired,\n  planet: planetPropType,\n};\n\nPlanet.defaultProps = {\n  planet: PropTypes.object,\n};\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { NavLink, withRouter } from 'react-router-dom';\nimport { getStarshipThunk } from '../redux/reducer';\nimport { Preloader } from './common/Preloader';\nimport { starshipsPropType } from '../propTypesConstant';\nimport { charUrlLength, filmsUrlLength } from '../constants';\n\nconst Starship = (props) => {\n  const { starship, getStarship } = props;\n  const { starshipId } = props.match.params;\n\n  useEffect(() => {\n    getStarship(starshipId);\n  }, []);\n\n  return (\n    <div className=\"details\">\n      <NavLink to=\"/\"><span>Home</span></NavLink>\n      <h1 className=\"details__heading\">Starship details</h1>\n      {!starship && <Preloader />}\n      {starship && (\n        <div className=\"details__content content\">\n          <h3 className=\"content__title\">{starship.name}</h3>\n          <p className=\"content__item\">\n            <strong>Model: </strong>\n            {starship.model}\n          </p>\n          <p className=\"content__item\">\n            <strong>Manufacturer: </strong>\n            {starship.manufacturer}\n          </p>\n          <p className=\"content__item\">\n            <strong>Cost in credits: </strong>\n            {' '}\n            {starship.cost_in_credits}\n          </p>\n          <p className=\"content__item\">\n            <strong>Length: </strong>\n            {' '}\n            {starship.length}\n          </p>\n          <p className=\"content__item\">\n            <strong>Max atmosphering speed: </strong>\n            {' '}\n            {starship.max_atmosphering_speed}\n          </p>\n          <p className=\"content__item\">\n            <strong>Crew: </strong>\n            {' '}\n            {starship.crew}\n          </p>\n          <p className=\"content__item\">\n            <strong>Passengers: </strong>\n            {' '}\n            {starship.passengers}\n          </p>\n          <p className=\"content__item\">\n            <strong>Cargo capacity: </strong>\n            {' '}\n            {starship.cargo_capacity}\n          </p>\n          <p className=\"content__item\">\n            <strong>Consumables: </strong>\n            {' '}\n            {starship.consumables}\n          </p>\n          <p className=\"content__item\">\n            <strong>Hyperdrive rating: </strong>\n            {' '}\n            {starship.hyperdrive_rating}\n          </p>\n          <p className=\"content__item\">\n            <strong>MGLT: </strong>\n            {' '}\n            {starship.MGLT}\n          </p>\n          <p className=\"content__item\">\n            <strong>Starship class: </strong>\n            {' '}\n            {starship.starship_class}\n          </p>\n          <ul className=\"content__item\">\n            <strong>Pilots:</strong>\n            {starship.pilots.map((pilot) => {\n              const charId = pilot.slice(charUrlLength, -1);\n\n              return (\n                <NavLink to={`/people/${charId}`} key={pilot}>\n                  <li>{pilot}</li>\n                </NavLink>\n              );\n            })}\n          </ul>\n          <ul className=\"content__item\">\n            <strong>Films:</strong>\n            {starship.films.map((film) => {\n              const filmId = film.slice(filmsUrlLength, -1);\n\n              return (\n                <NavLink to={`/films/${filmId}`} key={film}>\n                  <li>{film}</li>\n                </NavLink>\n              );\n            })}\n          </ul>\n\n        </div>\n      )}\n\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  starship: state.starship,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getStarship: starshipId => dispatch(getStarshipThunk(starshipId)),\n});\n\nconst StarshipWithRouter = withRouter(Starship);\n\nexport default connect(\n  mapStateToProps, mapDispatchToProps,\n)(StarshipWithRouter);\n\nStarship.propTypes = {\n  getStarship: PropTypes.func.isRequired,\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      starshipId: PropTypes.string,\n    }).isRequired,\n  }).isRequired,\n  starship: starshipsPropType,\n};\n\nStarship.defaultProps = {\n  starship: PropTypes.object,\n};\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { NavLink, withRouter } from 'react-router-dom';\nimport { getVehicleThunk } from '../redux/reducer';\nimport { Preloader } from './common/Preloader';\nimport { vehiclePropType } from '../propTypesConstant';\nimport { charUrlLength, filmsUrlLength } from '../constants';\n\nconst Vehicle = (props) => {\n  const { vehicle, getVehicle } = props;\n  const { vehicleId } = props.match.params;\n\n  useEffect(() => {\n    getVehicle(vehicleId);\n  }, []);\n\n  return (\n    <div className=\"details\">\n      <NavLink to=\"/\"><span>Home</span></NavLink>\n      <h1 className=\"details__heading\">Vehicle details</h1>\n      {!vehicle && <Preloader />}\n      {vehicle && (\n        <div className=\"details__content content\">\n          <h3 className=\"content__title\">{vehicle.name}</h3>\n          <p className=\"content__item\">\n            <strong>Model: </strong>\n            {vehicle.model}\n          </p>\n          <p className=\"content__item\">\n            <strong>Manufacturer: </strong>\n            {vehicle.manufacturer}\n          </p>\n          <p className=\"content__item\">\n            <strong>Cost in credits: </strong>\n            {' '}\n            {vehicle.cost_in_credits}\n          </p>\n          <p className=\"content__item\">\n            <strong>Length: </strong>\n            {' '}\n            {vehicle.length}\n          </p>\n          <p className=\"content__item\">\n            <strong>Max atmosphering speed: </strong>\n            {' '}\n            {vehicle.max_atmosphering_speed}\n          </p>\n          <p className=\"content__item\">\n            <strong>Crew: </strong>\n            {' '}\n            {vehicle.crew}\n          </p>\n          <p className=\"content__item\">\n            <strong>Passengers: </strong>\n            {' '}\n            {vehicle.passengers}\n          </p>\n          <p className=\"content__item\">\n            <strong>Cargo capacity: </strong>\n            {' '}\n            {vehicle.cargo_capacity}\n          </p>\n          <p className=\"content__item\">\n            <strong>Consumables: </strong>\n            {' '}\n            {vehicle.consumables}\n          </p>\n          <p className=\"content__item\">\n            <strong>Vehicle class: </strong>\n            {' '}\n            {vehicle.vehicle_class}\n          </p>\n          <ul className=\"content__item\">\n            <strong>Pilots:</strong>\n            {vehicle.pilots.map((pilot) => {\n              const charId = pilot.slice(charUrlLength, -1);\n\n              return (\n                <NavLink to={`/people/${charId}`} key={pilot}>\n                  <li>{pilot}</li>\n                </NavLink>\n              );\n            })}\n          </ul>\n          <ul className=\"content__item\">\n            <strong>Films:</strong>\n            {vehicle.films.map((film) => {\n              const filmId = film.slice(filmsUrlLength, -1);\n\n              return (\n                <NavLink to={`/films/${filmId}`} key={film}>\n                  <li>{film}</li>\n                </NavLink>\n              );\n            })}\n          </ul>\n\n        </div>\n      )}\n\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  vehicle: state.vehicle,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getVehicle: vehicleId => dispatch(getVehicleThunk(vehicleId)),\n});\n\nconst VehicleWithRouter = withRouter(Vehicle);\n\nexport default connect(\n  mapStateToProps, mapDispatchToProps,\n)(VehicleWithRouter);\n\nVehicle.propTypes = {\n  getVehicle: PropTypes.func.isRequired,\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      vehicleId: PropTypes.string,\n    }).isRequired,\n  }).isRequired,\n  vehicle: vehiclePropType,\n};\n\nVehicle.defaultProps = {\n  vehicle: PropTypes.object,\n};\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { NavLink, withRouter } from 'react-router-dom';\nimport { getSpeciesThunk } from '../redux/reducer';\nimport { Preloader } from './common/Preloader';\nimport { speciesPropType } from '../propTypesConstant';\nimport { charUrlLength, filmsUrlLength, speciesUrlLength } from '../constants';\n\nconst Species = (props) => {\n  const { species, getSpecies } = props;\n  const { speciesId } = props.match.params;\n\n  useEffect(() => {\n    getSpecies(speciesId);\n  }, []);\n\n  return (\n    <div className=\"details\">\n      <NavLink to=\"/\"><span>Home</span></NavLink>\n      <h1 className=\"details__heading\">Species details</h1>\n      {!species && <Preloader />}\n      {species && (\n        <div className=\"details__content content\">\n          <h3 className=\"content__title\">{species.name}</h3>\n          <p className=\"content__item\">\n            <strong>Classification: </strong>\n            {species.classification}\n          </p>\n          <p className=\"content__item\">\n            <strong>Designation: </strong>\n            {species.designation}\n          </p>\n          <p className=\"content__item\">\n            <strong>Average height: </strong>\n            {' '}\n            {species.average_height}\n          </p>\n          <p className=\"content__item\">\n            <strong>Skin colors: </strong>\n            {' '}\n            {species.skin_colors}\n          </p>\n          <p className=\"content__item\">\n            <strong>Hair colors: </strong>\n            {' '}\n            {species.hair_colors}\n          </p>\n          <p className=\"content__item\">\n            <strong>Eye colors: </strong>\n            {' '}\n            {species.eye_colors}\n          </p>\n          <p className=\"content__item\">\n            <strong>Average lifespan: </strong>\n            {' '}\n            {species.average_lifespan}\n          </p>\n          <p className=\"content__item\">\n            <strong>Homeworld: </strong>\n            {' '}\n            {species.homeworld && (\n              <NavLink\n                to={`/planets/${species.homeworld.slice(speciesUrlLength, -1)}`}\n              >\n                {species.homeworld}\n              </NavLink>\n            )}\n          </p>\n          <p className=\"content__item\">\n            <strong>Language: </strong>\n            {' '}\n            {species.language}\n          </p>\n          <ul className=\"content__item\">\n            <strong>Pilots:</strong>\n            {species.people.map((char) => {\n              const charId = char.slice(charUrlLength, -1);\n\n              return (\n                <NavLink to={`/people/${charId}`} key={char}>\n                  <li>{char}</li>\n                </NavLink>\n              );\n            })}\n          </ul>\n          <ul className=\"content__item\">\n            <strong>Films:</strong>\n            {species.films.map((film) => {\n              const filmId = film.slice(filmsUrlLength, -1);\n\n              return (\n                <NavLink to={`/films/${filmId}`} key={film}>\n                  <li>{film}</li>\n                </NavLink>\n              );\n            })}\n          </ul>\n\n        </div>\n      )}\n\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  species: state.species,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getSpecies: speciesId => dispatch(getSpeciesThunk(speciesId)),\n});\n\nconst SpeciesWithRouter = withRouter(Species);\n\nexport default connect(\n  mapStateToProps, mapDispatchToProps,\n)(SpeciesWithRouter);\n\nSpecies.propTypes = {\n  getSpecies: PropTypes.func.isRequired,\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      speciesId: PropTypes.string,\n    }).isRequired,\n  }).isRequired,\n  species: speciesPropType,\n};\n\nSpecies.defaultProps = {\n  species: PropTypes.object,\n};\n","import React from 'react';\nimport './App.scss';\nimport './resets.scss';\nimport { Route } from 'react-router-dom';\nimport EpisodesList from './components/EpisodesList';\nimport EpisodeDetails from './components/EpisodeDetails';\nimport Character from './components/Character';\nimport Planet from './components/Planet';\nimport Starship from './components/Starship';\nimport Vehicle from './components/Vehicle';\nimport Species from './components/Species';\n\nconst App = () => (\n  <div className=\"app-wrapper\">\n    <Route path=\"/\" component={EpisodesList} exact />\n    <Route path=\"/films/:filmId\" component={EpisodeDetails} />\n    <Route path=\"/people/:charId\" component={Character} />\n    <Route path=\"/planets/:planetId\" component={Planet} />\n    <Route path=\"/starships/:starshipId\" component={Starship} />\n    <Route path=\"/vehicles/:vehicleId\" component={Vehicle} />\n    <Route path=\"/species/:speciesId\" component={Species} />\n  </div>\n);\n\nexport default App;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { reducer } from './reducer';\n\nexport const store = createStore(reducer, applyMiddleware(thunkMiddleware));\n\nwindow.store = store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}