{"version":3,"sources":["redux/reducer.jsx","components/EpisodesList.jsx","App.jsx","api.js","redux/store.jsx","index.js"],"names":["initialState","films","EpisodesList","className","map","film","key","episode_id","title","connect","state","reducer","dispatch","getFilms","a","fetch","then","response","json","data","console","log","type","payload","results","props","useEffect","reducers","combineReducers","action","form","formReducer","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","document","getElementById"],"mappings":"mNAIMA,EAAe,CACnBC,MAAO,ICFIC,G,MAAe,SAAC,GAAD,IAAGD,EAAH,EAAGA,MAAH,OAC1B,wBAAIE,UAAU,gBACXF,EAAMG,KAAI,SAAAC,GAAI,OACb,wBACEC,IAAKD,EAAKE,WACVJ,UAAU,gBAGTE,EAAKG,aCmBCC,eARS,SAAAC,GAAK,MAAK,CAChCT,MAAOS,EAAMC,QAAQV,UAGI,SAAAW,GAAQ,MAAK,CACtCC,SAAU,kBAAMD,EFDW,uCAAM,WAAMA,GAAN,eAAAE,EAAA,sEGxBHC,MAAM,GAAD,OAFpB,yBAEoB,WAClCC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UHuBM,OAC3BC,EAD2B,OAEjCC,QAAQC,IAAIF,GAEZP,EAT2B,CAC3BU,KApBgB,YAqBhBC,QAOkBJ,EAAKK,UAJU,2CAAN,2DEIdf,EAvBH,SAACgB,GAAW,IACdxB,EAAoBwB,EAApBxB,MAAOY,EAAaY,EAAbZ,SAMf,OAJAa,qBAAU,WACRb,MACC,IAGD,yBAAKV,UAAU,eACb,wBAAIA,UAAU,aAAd,sCACA,kBAAC,EAAD,CAAcF,MAAOA,Q,wBEZrB0B,EAAWC,YAAgB,CAC/BjB,QJEqB,WAAmC,IAAlCD,EAAiC,uDAAzBV,EAAc6B,EAAW,uCACvD,OAAQA,EAAOP,MACb,IARc,YASZ,OAAO,2BACFZ,GADL,IAEET,MAAO4B,EAAON,UAGlB,QACE,OAAOb,IIVXoB,KAAMC,MAGKC,EAAQC,YAAYN,EAAUO,YAAgBC,MAE3DC,OAAOJ,MAAQA,ECNfK,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,OAEFO,SAASC,eAAe,U","file":"static/js/main.b8d9dae2.chunk.js","sourcesContent":["import { getFilms } from '../api';\n\nconst GET_FILMS = 'GET_FILMS';\n\nconst initialState = {\n  films: [],\n};\n\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_FILMS:\n      return {\n        ...state,\n        films: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst setFilms = payload => ({\n  type: GET_FILMS,\n  payload,\n});\n\nexport const getFilmsThunk = () => async(dispatch) => {\n  const data = await getFilms();\n  console.log(data);\n\n  dispatch(setFilms(data.results));\n};\n","import React from 'react';\nimport './EpisodesList.scss';\n\nexport const EpisodesList = ({ films }) => (\n  <ul className=\"movies__list\">\n    {films.map(film => (\n      <li\n        key={film.episode_id}\n        className=\"movies__item\"\n      >\n\n        {film.title}\n      </li>\n    ))}\n  </ul>\n);\n","import React, { useEffect } from 'react';\nimport './App.scss';\nimport './resets.scss';\nimport { connect } from 'react-redux';\nimport { getFilmsThunk } from './redux/reducer';\nimport { EpisodesList } from './components/EpisodesList';\n\nconst App = (props) => {\n  const { films, getFilms } = props;\n\n  useEffect(() => {\n    getFilms();\n  }, []);\n\n  return (\n    <div className=\"app-wrapper\">\n      <h1 className=\"app-title\">The list of the star wars episodes</h1>\n      <EpisodesList films={films} />\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  films: state.reducer.films,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getFilms: () => dispatch(getFilmsThunk()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const BASE_URL = 'https://swapi.dev/api/';\n\nexport const getFilms = page => fetch(`${BASE_URL}films/`)\n  .then(response => response.json());\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { reducer as formReducer } from 'redux-form';\nimport { reducer } from './reducer';\n\nconst reducers = combineReducers({\n  reducer,\n  form: formReducer,\n});\n\nexport const store = createStore(reducers, applyMiddleware(thunkMiddleware));\n\nwindow.store = store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}